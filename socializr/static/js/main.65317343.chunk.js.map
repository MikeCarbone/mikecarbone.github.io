{"version":3,"sources":["components/Stats.jsx","App.js","serviceWorker.js","index.js"],"names":["Stats","react_default","a","createElement","className","src","this","props","pic","alt","href","concat","username","target","rel","followers","following","tweetCount","likeCount","React","Component","options","document","getElementsByClassName","console","log","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","user","isEmpty","isLoading","nameEntered","twitterData","instagramData","socialStatus","usernameEntered","bind","assertThisInitialized","history","window","localStorage","length","setState","avatar","JSON","parse","error","_this2","getElementById","value","readyStateCallback","req","readyState","responseObject","responseText","finishStatus","finishedAt","resultsUrl","requestId","_id","poller","fetchResults","theURL","Httpreq","XMLHttpRequest","open","send","dataPayload","stateSetter","editLocalHistory","setTimeout","request","onreadystatechange","data","pageFunctionResult","states","keys","forEach","key","setItem","body","startUrls","setRequestHeader","stringify","content","Stats_Stats","loadingImg","id","placeholder","type","onClick","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65317343.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Stats extends React.Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <img className=\"stats__pic\" src={this.props.pic} alt=\"Avatar\"/>\r\n        <h1><a href={`https://twitter.com/${this.props.username}`} target=\"_blank\" rel=\"noopener noreferrer\"> @{this.props.username}</a></h1>\r\n        <div className=\"stats\">\r\n            <div className=\"stats__stat\">\r\n                <p>{this.props.followers}</p>\r\n                <h2>Followers</h2>\r\n            </div>\r\n            <div className=\"stats__stat\">\r\n                <p>{this.props.following}</p>\r\n                <h2>Following</h2>\r\n            </div>\r\n            <div className=\"stats__stat\">\r\n                <p>{this.props.tweetCount}</p>\r\n                <h2>Total tweets</h2>\r\n            </div>\r\n            <div className=\"stats__stat\">\r\n              <p>{this.props.likeCount}</p>\r\n              <h2>Total likes</h2>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Stats from './components/Stats';\nimport './App.css';\n\nlet options = document.getElementsByClassName(\"social-option\");\nconsole.log(options);\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    \n    //Initialize state\n    this.state = {\n      user: '',\n      followers: '',\n      following: '',\n      tweetCount: '',\n      likeCount: '',\n      isEmpty: true,\n      isLoading: false,\n      nameEntered: false,\n      twitterData: [],\n      instagramData: [],\n      socialStatus: ''\n    };\n  \n    this.usernameEntered = this.usernameEntered.bind(this);\n  }\n\n  componentWillMount(){\n    \n    //Check local storage for past searches\n    let history = window.localStorage;\n    if (history.length <= 0){\n      console.log('Empty history');\n    } else {\n      \n      //Set current state to local storage values if its not empty\n      try{\n        this.setState({\n          user: history.user,\n          followers: history.followers,\n          following: history.following,\n          tweetCount: history.tweetCount,\n          likeCount: history.likeCount,\n          avatar: history.avatar,\n          isEmpty: JSON.parse(history.isEmpty),\n          isLoading: JSON.parse(history.isLoading)\n        });\n      } catch(error) {\n        console.log(error);\n      }\n    }\n  }\n  \n  //Function called when submit is hit\n  usernameEntered(){\n    let username = document.getElementById(\"twitter-user-js\").value;\n    \n    //Store entered username to local state\n    //Trigger loading animations and other functions with isLoading\n    this.setState({\n      isLoading: true,\n      user: username\n    });\n    \n    //Called on HTTP request readystatechange event\n    const readyStateCallback = (req) => {\n      if (req.readyState === 4) {\n            var responseObject = JSON.parse(req.responseText);\n            var finishStatus = responseObject.finishedAt;\n            var resultsUrl = responseObject.resultsUrl;\n            var requestId = responseObject._id;\n            \n            //Check if results are ready to be requested\n            return (finishStatus == null) ? poller(requestId) : fetchResults(resultsUrl);\n      } else {\n        //Response not ready\n        return;\n      }\n    };\n    \n    //Called when results are ready, fetches new API that has results\n    const fetchResults = (theURL) => {\n        var Httpreq = new XMLHttpRequest();\n            Httpreq.open(\"GET\",theURL,false);\n            Httpreq.send(null);\n        \n        let dataPayload = JSON.parse(Httpreq.responseText);\n        stateSetter(dataPayload);\n        \n        return editLocalHistory(this.state);\n    };\n    \n    //Long poller that is called if results arent immediately ready\n    //This will usually be called b/c API has to download Twitter webpage\n    const poller = (requestId) => {\n        console.log('Original poll still runnning, executing long poller');\n        \n        //Intermittently check to see if requests' results are ready\n        setTimeout(function(){\n          var request = new XMLHttpRequest();\n              request.open('GET', `https://api.apify.com/v1/execs/${requestId}`);\n              request.onreadystatechange = function(){ readyStateCallback(this)};\n              request.send();\n      }, 1000);\n    };\n    \n    //Updates state to reflect new response data\n    const stateSetter = (data) => {\n      return this.setState({\n        followers: data[0].pageFunctionResult[3],\n        following: data[0].pageFunctionResult[2],\n        tweetCount: data[0].pageFunctionResult[1],\n        likeCount: data[0].pageFunctionResult[4],\n        avatar: data[0].pageFunctionResult[0],\n        isEmpty: false,\n        isLoading: false\n      });\n    }\n    \n    //Resets local storage to match most recent search\n    const editLocalHistory = (states) => {\n      Object.keys(states).forEach((key) =>{\n          localStorage.setItem(key, states[key]);\n      });\n    }\n\n    //Validate field content isnt empty\n    if (username){\n\n      //Parameters to POST with request\n      var body = {\n        '_id': 'yxCYAw3hon6qnebkN',\n        'startUrls':[{\n            'key': 'START',\n            'value': `https://twitter.com/${username}`\n        }]\n      };\n      \n      //First request to the API\n      var request = new XMLHttpRequest();\n          request.open('POST', 'https://api.apify.com/v1/F6zg3S4YnudDgw5xe/crawlers/yxCYAw3hon6qnebkN/execute?token=xSCGuWqoaXFFmfzrvNH9zW43L');\n          request.setRequestHeader('Content-Type', 'application/json');\n          request.onreadystatechange = function(){ readyStateCallback(this);};\n          request.send(JSON.stringify(body));\n  \n    } else {\n      console.log('Please enter a valid username');\n    }\n  }\n\n  render() {\n    var content = (this.state.isEmpty)\n                  ?  <div>\n                        <h2 className=\"placeholder-text\">Please enter your Twitter handle to get started!</h2>\n                        <img className=\"placeholder-img\" alt=\"Phone\" src=\"./social-bg.png\"/>\n                    </div>\n                  : <Stats  username={this.state.user} \n                            pic={this.state.avatar} \n                            followers={this.state.followers} \n                            following={this.state.following} \n                            tweetCount={this.state.tweetCount} \n                            likeCount={this.state.likeCount} />\n    \n    var loadingImg = (this.state.isLoading)\n                  ?   <div>\n                        <img className=\"loading-sign\" alt=\"Loading sign\" src=\"./loading-sign.svg\"/>\n                        <p>This can take up to 20 seconds</p>\n                      </div>\n                  : null;\n    return (\n      <div>\n        <h1 className=\"header\">Socializr</h1>\n        \n        \n        {content}\n\n        {loadingImg}\n\n        <input id=\"twitter-user-js\" placeholder=\"Enter your Twitter user name here\" type=\"text\" />\n        <button onClick={this.usernameEntered}>Submit</button>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}